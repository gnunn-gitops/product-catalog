apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: server
spec:
  workspaces:
    - name: git-source
    - name: maven-settings
    - name: newman-env
    - name: gitops-manifests
  params:
    - name: source_git_revision
      type: string
      default: master
    - name: source_git_url
      type: string
      default: https://github.com/gnunn-gitops/product-catalog-server
    - name: gitops_git_revision
      type: string
      default: main
    - name: gitops_git_url
      type: string
      default: https://github.com/gnunn-gitops/product-catalog
    - name: api-test-collection-url
      type: string
      default: https://raw.githubusercontent.com/gnunn-gitops/product-catalog-server/master/tests/product-catalog-server-tests.json
    - name: acs_central_host
      type: string
      default: central-stackrox.apps.home.ocplab.com
    - name: MAVEN_MIRROR_URL
      default: ""
    - name: image_dest_url
      type: string
      description: External registry location to copy image to
      default: quay.io/gnunn/server
    - name: push-to-prod
      description: "Set to true if you want the pipeline to create a PR to push to prod"
      type: string
      default: "false"
    - name: cluster
      type: string
      description: Cluster to push to
      default: "local.home"
    - name: acs-secret
      description: Name of the secret with the central endpoint and api token. If not set no scan is done
      default: "ignore"
    - name: slack-secret
      description: Name of the secret with the slack authentication. If not set no slack messages are sent
      default: "ignore"
    - name: MAVEN_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/openshift/java:openjdk-11-ubi8
  tasks:
    - name: acquire-lease
      taskRef:
        name: acquire-lease
        kind: ClusterTask
      params:
        - name: lease-name
          value: "$(context.pipeline.name)"
        - name: owner
          value: "$(context.pipelineRun.name)"
    - name: clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter:
        - acquire-lease
      workspaces:
        - name: output
          workspace: git-source
      params:
        - name: url
          value: "$(params.source_git_url)"
        - name: revision
          value: "$(params.source_git_revision)"
        - name: deleteExisting
          value: "true"
    - name: generate-id
      taskRef:
        name: generate-id
        kind: Task
      runAfter:
        - clone
      workspaces:
        - name: source
          workspace: git-source
    - name: build
      taskRef:
        name: maven
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
        - name: maven-settings
          workspace: maven-settings
      runAfter:
        - generate-id
      params:
        - name: MAVEN_IMAGE
          value: $(params.MAVEN_IMAGE)
        - name: MAVEN_MIRROR_URL
          value: "$(params.MAVEN_MIRROR_URL)"
        - name: MAVEN_REPO_CONFIG_SECRET
          value: "maven-repo-creds"
        - name: GOALS
          value:
            - "package"
    - name: quality
      taskRef:
        name: maven
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
        - name: maven-settings
          workspace: maven-settings
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.MAVEN_IMAGE)
        - name: MAVEN_MIRROR_URL
          value: "$(params.MAVEN_MIRROR_URL)"
        - name: MAVEN_REPO_CONFIG_SECRET
          value: "maven-repo-creds"
        - name: GOALS
          value:
            - "sonar:sonar"
            - "-Pquality"
    # - name: deploy-nexus
    #   taskRef:
    #     name: maven
    #     kind: Task
    #   workspaces:
    #     - name: source
    #       workspace: git-source
    #     - name: maven-settings
    #       workspace: maven-settings
    #   runAfter:
    #     - quality
    #   params:
    #     - name: MAVEN_IMAGE
    #       value: $(params.MAVEN_IMAGE)
    #     - name: MAVEN_MIRROR_URL
    #       value: "$(params.MAVEN_MIRROR_URL)"
    #     - name: MAVEN_REPO_CONFIG_SECRET
    #       value: "maven-repo-creds"
    #     - name: GOALS
    #       value:
    #         - deploy
    - name: build-image
      taskRef:
        name: binary-s2i
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
      runAfter:
        - quality
      params:
        - name: file
          value: "$(workspaces.source.path)/target/*-runner.jar"
        - name: buildconfig
          value: server
        - name: IMAGE
          value: $(params.image_dest_url)
    - name: tag-dev-image
      taskRef:
        name: push-image
        kind: Task
      runAfter:
        - build-image
        # - deploy-nexus
      params:
        - name: src-image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: dest-image
          value: $(params.image_dest_url)
        - name: dest-tags
          value: $(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid),dev
    - name: acs-scan-image
      taskRef:
        name: rox-image-scan
        kind: ClusterTask
      runAfter:
        - build-image
      params:
        - name: rox_central_endpoint
          value: $(params.acs-secret)
        - name: rox_api_token
          value: $(params.acs-secret)
        - name: image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: output_format
          value: table
      when:
        - input: "$(params.acs-secret)"
          operator: notin
          values: ["ignore"]
    - name: acs-check-image
      taskRef:
        name: rox-image-check
        kind: ClusterTask
      runAfter:
        - acs-scan-image
      params:
        - name: rox_central_endpoint
          value: $(params.acs-secret)
        - name: rox_api_token
          value: $(params.acs-secret)
        - name: image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
      when:
        - input: "$(params.acs-secret)"
          operator: notin
          values: ["ignore"]
    - name: notify-on-scan-fail
      taskRef:
        name: send-to-webhook-slack
        kind: Task
      runAfter:
        - acs-check-image
      when:
        - input: "$(tasks.acs-check-image.results.check_passed)"
          operator: in
          values: ["false"]
        - input: "$(params.slack-secret)"
          operator: notin
          values: ["ignore"]
      params:
        - name: webhook-secret
          value: $(params.slack-secret)
        - name: message
          value: "The image scan for server:$(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid) failed, please view test results here: https://$(params.acs_central_host)/main/vulnerability-management/images/$(tasks.build-image.results.IMAGE_DIGEST)"
    - name: clone-gitops-manifests
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter:
        - tag-dev-image
      workspaces:
        - name: output
          workspace: gitops-manifests
      params:
        - name: url
          value: "$(params.gitops_git_url)"
        - name: revision
          value: "$(params.gitops_git_revision)"
        - name: deleteExisting
          value: "true"
    - name: dev-update-image
      taskRef:
        name: update-image
      runAfter:
        - clone-gitops-manifests
      params:
        - name: git_revision
          value: "$(params.gitops_git_revision)"
        - name: path
          value: clusters/$(params.cluster)/overlays/dev
        - name: image
          value: "$(params.image_dest_url)"
        - name: image_tag
          value: $(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid)
      workspaces:
        - name: gitops-manifests
          workspace: gitops-manifests
    - name: dev-gitops-deploy
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - dev-update-image
      params:
        - name: application-name
          value: product-catalog-dev
        - name: revision
          value: $(params.gitops_git_revision)
        - name: deployment
          value: server
        - name: namespace
          value: product-catalog-dev
        - name: image-tag
          value: $(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid)
    - name: dev-test
      taskRef:
        name: newman
        kind: Task
      runAfter:
        - dev-gitops-deploy
      params:
        - name: COLLECTION
          value: $(params.api-test-collection-url)
        - name: ENVIRONMENT
          value: newman-dev-env.json
      workspaces:
        - name: newman-env
          workspace: newman-env
    - name: tag-test-image
      taskRef:
        name: push-image
        kind: Task
      runAfter:
        - dev-test
      params:
        - name: src-image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: dest-image
          value: $(params.image_dest_url)
        - name: dest-tags
          value: test
    - name: test-update-image
      taskRef:
        name: update-image
      runAfter:
        - tag-test-image
      params:
        - name: git_revision
          value: "$(params.gitops_git_revision)"
        - name: path
          value: clusters/$(params.cluster)/overlays/test
        - name: image
          value: "$(params.image_dest_url)"
        - name: image_tag
          value: $(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid)
      workspaces:
        - name: gitops-manifests
          workspace: gitops-manifests
    - name: test-gitops-deploy
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - test-update-image
      params:
        - name: application-name
          value: product-catalog-test
        - name: revision
          value: $(params.gitops_git_revision)
        - name: deployment
          value: server
        - name: namespace
          value: product-catalog-test
        - name: image-tag
          value: $(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid)
    - name: test-test
      taskRef:
        name: newman
        kind: Task
      runAfter:
        - test-gitops-deploy
      params:
        - name: COLLECTION
          value: $(params.api-test-collection-url)
        - name: ENVIRONMENT
          value: newman-test-env.json
      workspaces:
        - name: newman-env
          workspace: newman-env
    - name: create-prod-pr
      taskRef:
        name: tkn
        kind: Task
      when:
        - input: "$(params.push-to-prod)"
          operator: in
          values: ["true","yes"]
      runAfter:
        - test-test
        - notify-on-scan-fail
      params:
        - name: commands
          value: |
            if ["$(params.acs-secret)" = "ignore"]; then
              echo "ACS was not enabled for this run"
              tkn pipeline start push-prod-pr --prefix-name server -p git_revision=main -p image_dest_tag=$(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid) -p image_dest_url=$(params.image_dest_url) -p cluster=$(params.cluster) -p app=server -s github-pipeline -w name=git-source,volumeClaimTemplateFile=/templates/workspace-template.yaml
            else
              echo "ACS enabled, pass results"
              tkn pipeline start push-prod-pr --prefix-name server -p git_revision=main -p image_dest_tag=$(tasks.generate-id.results.short-commit)-$(tasks.generate-id.results.build-uid) -p image_dest_url=$(params.image_dest_url) -p cluster=$(params.cluster) -p app=server -p acs_image_scan_results=https://$(params.acs_central_host)/main/vulnerability-management/images/$(tasks.build-image.results.IMAGE_DIGEST) -s github-pipeline -w name=git-source,volumeClaimTemplateFile=/templates/workspace-template.yaml
            fi
  finally:
    - name: release-lease
      taskRef:
        name: release-lease
        kind: ClusterTask
      params:
        - name: lease-name
          value: "$(context.pipeline.name)"
    - name: notify-on-fail
      taskRef:
        name: send-to-webhook-slack
        kind: Task
      when:
        - input: $(tasks.status)
          operator: in
          values: ["Failed"]
        - input: "$(params.slack-secret)"
          operator: notin
          values: ["ignore"]
      params:
        - name: webhook-secret
          value: $(params.slack-secret)
        - name: message
          value: "Some tasks in the $(context.pipeline.name) have failed in pipelinerun $(context.pipelinerun.name) failed, please investigate"