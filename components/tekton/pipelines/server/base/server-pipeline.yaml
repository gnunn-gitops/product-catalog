apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: server
spec:
  workspaces:
    - name: git-source
    - name: maven-settings
    - name: newman-env
    - name: gitops-manifests
    - name: slack-secret
      optional: true
    - name: acs-central
      optional: true
  params:
    - name: source_git_revision
      type: string
      default: master
    - name: source_git_url
      type: string
      default: https://github.com/gnunn-gitops/product-catalog-server
    - name: gitops_git_revision
      type: string
      default: main
    - name: gitops_git_url
      type: string
      default: https://github.com/gnunn-gitops/product-catalog
    - name: api_test_collection_url
      type: string
      default: https://raw.githubusercontent.com/gnunn-gitops/product-catalog-server/master/tests/product-catalog-server-tests.json
    - name: MAVEN_MIRROR_URL
      default: ""
    - name: image_dest_url
      type: string
      description: External registry location to copy image to
      default: quay.io/gnunn/server
    - name: cluster
      type: string
      description: Cluster to push to
      default: "local.home"
    - name: MAVEN_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/openshift/java:openjdk-11-ubi8
    - name: sonarqube_host
      default: sonarqube-dev-tools.apps.hub.ocplab.com
      description: Where sonarqube is located to support project scanning
  tasks:
    - name: acquire-lease
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/acquire-lease/1.0/acquire-lease.yaml
        resolver: git
      params:
        - name: lease-name
          value: "$(context.pipeline.name)"
        - name: owner
          value: "$(context.pipelineRun.name)"
    - name: variables
      taskRef:
        name: variables-from-k8s
      runAfter:
        - acquire-lease
      workspaces:
        - name: acs-central
          workspace: acs-central
    - name: clone
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: git-clone
        - name: namespace
          value: openshift-pipelines
      runAfter:
        - variables
      workspaces:
        - name: output
          workspace: git-source
      params:
        - name: URL
          value: "$(params.source_git_url)"
        - name: REVISION
          value: "$(params.source_git_revision)"
        - name:  DELETE_EXISTING
          value: "true"
    - name: generate-id
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/generate-build-id/1.0/generate-build-id.yaml
        resolver: git
      runAfter:
        - clone
      workspaces:
        - name: source
          workspace: git-source
    - name: build
      taskRef:
        name: maven
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
        - name: maven-settings
          workspace: maven-settings
      runAfter:
        - generate-id
      params:
        - name: MAVEN_IMAGE
          value: $(params.MAVEN_IMAGE)
        - name: MAVEN_MIRROR_URL
          value: "$(params.MAVEN_MIRROR_URL)"
        - name: MAVEN_REPO_CONFIG_SECRET
          value: "maven-repo-creds"
        - name: GOALS
          value:
            - "package"
            - "deploy"
    - name: quality
      taskRef:
        name: maven
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
        - name: maven-settings
          workspace: maven-settings
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.MAVEN_IMAGE)
        - name: MAVEN_MIRROR_URL
          value: "$(params.MAVEN_MIRROR_URL)"
        - name: MAVEN_REPO_CONFIG_SECRET
          value: "maven-repo-creds"
        - name: GOALS
          value:
            - "sonar:sonar"
            - "-Pquality"
    - name: build-image
      taskRef:
        name: buildah
        kind: Task
      workspaces:
        - name: source
          workspace: git-source
      runAfter:
        - quality
      params:
      - name: IMAGE
        value: $(params.image_dest_url):latest
      - name: DOCKERFILE
        value: ./Containerfile
    - name: tag-dev-image
      taskRef:
        name: push-image
        kind: Task
      runAfter:
        - build-image
        # - deploy-nexus
      params:
        - name: src_image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: dest_image
          value: $(params.image_dest_url)
        - name: dest_tags
          value: "$(tasks.generate-id.results.tag_id),dev"
    - name: acs-scan-image
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/acs-image-scan/1.0/acs-image-scan.yaml
        resolver: git
      runAfter:
        - build-image
      params:
        - name: output_format
          value: table
        - name: image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
      when:
        - input: "$(workspaces.acs-central.bound)"
          operator: in
          values: ["true"]
      workspaces:
        - name: acs-central
          workspace: acs-central
    - name: acs-check-image
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/acs-image-check/1.0/acs-image-check.yaml
        resolver: git
      runAfter:
        - acs-scan-image
      params:
        - name: image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
      when:
        - input: "$(workspaces.acs-central.bound)"
          operator: in
          values: ["true"]
      workspaces:
        - name: acs-central
          workspace: acs-central
    - name: generate-sbom
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/acs-image-sbom/1.0/acs-image-sbom.yaml
        resolver: git
      runAfter:
        - acs-check-image
      params:
        - name: image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: cyclonedxHostUrl
          value: https://server.apps.hub.ocplab.com
      when:
        - input: "$(workspaces.acs-central.bound)"
          operator: in
          values: ["true"]
      workspaces:
        - name: acs-central
          workspace: acs-central
    - name: notify-on-scan-fail
      taskRef:
        name: send-to-webhook-slack
        kind: Task
      runAfter:
        - generate-sbom
      when:
        - input: "$(tasks.acs-check-image.results.check_passed)"
          operator: in
          values: ["false"]
      params:
        - name: message
          value: |-
           *Server Image Scan Failed*
           The image scan for server:$(tasks.generate-id.results.tag_id) failed, please view test results here: https://$(tasks.variables.results.acs_central_endpoint)/main/vulnerability-management/images/$(tasks.build-image.results.IMAGE_DIGEST)
      workspaces:
        - name: slack-secret
          workspace: slack-secret
    # - name: verify-signature
    #   taskRef:
    #     kind: Task
    #     params:
    #       - name: pathInRepo
    #         value: task/verify-signature/1.0/verify-signature.yaml
    #     resolver: git
    #   runAfter:
    #     - acs-check-image
    #   params:
    #     - name: tuf_url
    #       value: https://tuf-trusted-artifact-signer.apps.home.ocplab.com
    #     - name: oidc_issuer_url
    #       value: https://sso.ocplab.com/realms/ocplab
    #     - name: fulcio_url
    #       value: https://fulcio-server-trusted-artifact-signer.apps.home.ocplab.com
    #     - name: rekor_url
    #       value: https://rekor-server-trusted-artifact-signer.apps.home.ocplab.com
    #     - name: certificate_identity
    #       value: tekton-builder@ocplab.com
    #     - name: image_url
    #       value: $(params.image_dest_url):$(tasks.generate-id.results.tag_id)
    - name: clone-gitops-manifests
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: git-clone
        - name: namespace
          value: openshift-pipelines
      runAfter:
        - tag-dev-image
      workspaces:
        - name: output
          workspace: gitops-manifests
      params:
        - name: URL
          value: "$(params.gitops_git_url)"
        - name: REVISION
          value: "$(params.gitops_git_revision)"
        - name:  DELETE_EXISTING
          value: "true"
    - name: dev-update-image
      taskRef:
        name: update-image
      runAfter:
        - clone-gitops-manifests
      params:
        - name: url
          value: "$(params.gitops_git_url)"
        - name: git_revision
          value: "$(params.gitops_git_revision)"
        - name: path
          value: clusters/$(params.cluster)/overlays/dev
        - name: image
          value: "$(params.image_dest_url)"
        - name: image_tag
          value: "$(tasks.generate-id.results.tag_id)"
      workspaces:
        - name: gitops-manifests
          workspace: gitops-manifests
    - name: dev-gitops-deploy
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/argocd-sync-and-wait/1.0/argocd-sync-and-wait.yaml
        resolver: git
      runAfter:
        - dev-update-image
      params:
        - name: application_name
          value: product-catalog-gitops/product-catalog-dev
        - name: revision
          value: $(params.gitops_git_revision)
        - name: deployment
          value: server
        - name: namespace
          value: product-catalog-dev
        - name: image_tag
          value: "$(tasks.generate-id.results.tag_id)"
    - name: dev-test
      taskRef:
        name: newman
        kind: Task
      runAfter:
        - dev-gitops-deploy
      params:
        - name: COLLECTION
          value: $(params.api_test_collection_url)
        - name: ENVIRONMENT
          value: newman-dev-env.json
      workspaces:
        - name: newman-env
          workspace: newman-env
    - name: tag-test-image
      taskRef:
        name: push-image
        kind: Task
      runAfter:
        - dev-test
      params:
        - name: src_image
          value: $(params.image_dest_url)@$(tasks.build-image.results.IMAGE_DIGEST)
        - name: dest_image
          value: $(params.image_dest_url)
        - name: dest_tags
          value: test
    - name: test-update-image
      taskRef:
        name: update-image
      runAfter:
        - tag-test-image
      params:
        - name: git_revision
          value: "$(params.gitops_git_revision)"
        - name: path
          value: clusters/$(params.cluster)/overlays/test
        - name: image
          value: "$(params.image_dest_url)"
        - name: image_tag
          value: "$(tasks.generate-id.results.tag_id)"
      workspaces:
        - name: gitops-manifests
          workspace: gitops-manifests
    - name: test-gitops-deploy
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/argocd-sync-and-wait/1.0/argocd-sync-and-wait.yaml
        resolver: git
      runAfter:
        - test-update-image
      params:
        - name: application_name
          value: product-catalog-gitops/product-catalog-test
        - name: revision
          value: $(params.gitops_git_revision)
        - name: deployment
          value: server
        - name: namespace
          value: product-catalog-test
        - name: image_tag
          value: "$(tasks.generate-id.results.tag_id)"
    - name: test-test
      taskRef:
        name: newman
        kind: Task
      runAfter:
        - test-gitops-deploy
      params:
        - name: COLLECTION
          value: $(params.api_test_collection_url)
        - name: ENVIRONMENT
          value: newman-test-env.json
      workspaces:
        - name: newman-env
          workspace: newman-env
    - name: notify-build-complete
      taskRef:
        name: send-to-webhook-slack
        kind: Task
      runAfter:
        - test-test
        - notify-on-scan-fail
      params:
        - name: console_message
          value: |-
            Server Build $(tasks.generate-id.results.tag_id) Completed

            The build of image $(params.image_dest_url):$(tasks.generate-id.results.tag_id) has been completed

            * Quay Image: https://$(params.image_dest_url):$(tasks.generate-id.results.tag_id)
            * ACS Scan: https://$(tasks.variables.results.acs_central_endpoint)/main/vulnerability-management/images/$(tasks.build-image.results.IMAGE_DIGEST)
            * SonarQube Results: https://$(params.sonarqube_host)/dashboard?id=product-catalog-server
        - name: message_type
          value: raw
        - name: message
          value: |-
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Server Pipeline Complete",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Server pipeline for image $(tasks.generate-id.results.tag_id) has completed"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Pipeline Results*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "* <https://$(params.image_dest_url):$(tasks.generate-id.results.tag_id)|Quay Image>\n* <https://$(tasks.variables.results.acs_central_endpoint)/main/vulnerability-management/images/$(tasks.build-image.results.IMAGE_DIGEST)|ACS Scan>\n* <https://$(params.sonarqube_host)/dashboard?id=product-catalog-server|SonarQube>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "To push this specific release to production, use the button below to create a new pull request to be approved."
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                          "type": "plain_text",
                          "text": "Create Release Pull Request :repeat:",
                          "emoji": true
                      },
                      "url": "https://slack-message-handler-product-catalog-cicd.${SUB_DOMAIN}/releaseApp?application=server&cluster=$(params.cluster)&image=$(params.image_dest_url)&tag=$(tasks.generate-id.results.tag_id)"
                    }
                  ]
                }
              ]
            }
      workspaces:
        - name: slack-secret
          workspace: slack-secret
  finally:
    - name: release-lease
      taskRef:
        kind: Task
        params:
          - name: pathInRepo
            value: task/release-lease/1.0/release-lease.yaml
        resolver: git
      params:
        - name: lease-name
          value: "$(context.pipeline.name)"
    - name: notify-on-fail
      taskRef:
        name: send-to-webhook-slack
        kind: Task
      when:
        - input: $(tasks.status)
          operator: in
          values: ["Failed"]
        - input: "$(workspaces.slack-secret.bound)"
          operator: in
          values: ["true"]
      params:
        - name: message
          value: "Some tasks in the $(context.pipeline.name) have failed in pipelinerun $(context.pipelinerun.name) failed, please investigate"
      workspaces:
        - name: slack-secret
          workspace: slack-secret
