apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: binary-s2i
spec:
  workspaces:
  - name: source
  params:
    - name: directory
      description: The sub-directory to use for the wildcard build
      type: string
      default: ""
    - name: file
      description: The file to use for the s2i binary build, can be a wildcard. If it resolves to multiple files the first one is used
      type: string
      default: ""
    - name: buildconfig
      type: string
    - name: IMAGE
      type: string
      description: "Only needed if using chains to automatically specify sign the image"
      default: ""
  results:
  - description: The build generated by this task
    name: build
  - description: The digest for the image created
    name: IMAGE_DIGEST
  - description: The URL for the image
    name: IMAGE_URL
  steps:
    - name: s2i-build
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash

        if [[ "$(params.directory)" == "" && "$(params.file)" == "" ]]
        then
          echo "The task must have either directory or file parameters set"
          exit 1
        fi

        if [ "$(params.directory)" != "" ];
        then
          oc start-build $(params.buildconfig) --from-dir=$(params.directory) --wait=true > output.txt
        else
          FILE_PATH="$(ls $(params.file))"
          echo "Using file ${FILE_PATH} for binary build"
          oc start-build $(params.buildconfig) --from-file="${FILE_PATH}" --wait=true > output.txt
        fi

        BUILD=$(grep -oP '(?<=build\.build\.openshift\.io\/).\S*' output.txt)
        echo -n "$BUILD" > $(results.build.path)
        echo "Build created was $BUILD"

        STATUS=$(oc get build $BUILD -o=jsonpath='{.status.phase}')
        if [ $STATUS == "Failed" ];
        then
          echo "Build $BUILD failed"
          exit 1
        fi

        DIGEST=$(oc get build $BUILD -o jsonpath="{.status.output.to.imageDigest}")
        echo -n "$DIGEST" > $(results.IMAGE_DIGEST.path)
        echo "Digest for image build was $DIGEST"

        IMAGE_URL=$(oc get build $BUILD -o jsonpath="{.status.outputDockerImageReference}")
        IMAGE_URL="${IMAGE_URL%:*}"
        echo -n "$IMAGE_URL" > $(results.IMAGE_URL.path)
        echo "Image was pushed to: $IMAGE_URL"