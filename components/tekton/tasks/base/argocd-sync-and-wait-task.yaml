apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-task-sync-and-wait
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Deployment
    tekton.dev/tags: deploy
    tekton.dev/displayName: "argocd"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task syncs (deploys) an Argo CD application and waits for it to be healthy.

    To do so, it requires the address of the Argo CD server and some form of
    authentication either a username/password or an authentication token.

  params:
    - name: deployment
      description: name of the deployment
    - name: namespace
      description: namespace where the deployment is located
    - name: image_tag
      description: tag of the image that is expected to be deployed
    - name: container
      description: the ordinal position in the container (0,1,2) in .spec.template.spec.containers
      default: "0"
    - name: application_name
      description: name of the application to sync
    - name: revision
      description: the revision to sync to
      default: HEAD
    - name: flags
      default: "--grpc-web"
    - name: gitops-version
      default: v1.7.0
  stepTemplate:
    envFrom:
      - secretRef:
          name: argocd-env-secret  # used for authentication (username/password or auth token) and server address
  steps:
    - name: wait-and-sync
      #image: registry.redhat.io/openshift-gitops-1/argocd-rhel8:$(params.gitops-version)
      # Replace above with below to include jq
      image: quay.io/gnunn/tools:latest
      script: |

        alias argocd='argocd --insecure'

        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD" "$(params.flags)";
        fi

        # Sync application
        if [[ $(argocd app get $(params.application_name) -o json | jq '.spec.syncPolicy.automated') != "null" ]] ; then
          argocd app get $(params.application_name) --refresh
        else
          argocd app sync $(params.application_name)
        fi

        # Application may already be syncing due to webhook
        echo "#### Waiting for automatic sync if it was already triggered (or other pending operation) ####"
        argocd app wait "$(params.application_name)" --operation "$(params.flags)"

        # Validate image is what we expect
        CURRENT_TAG=$(oc get deploy $(params.deployment) -n $(params.namespace) -o jsonpath="{.spec.template.spec.containers[$(params.container)].image}" | cut -d ":" -f2)
        if [ "$CURRENT_TAG" = "$(params.image_tag)" ]; then
          echo "#### Image has been synced ####"
        else
          echo "#### Image failed to sync, requested tag is $(params.image_tag) but current tag is $CURRENT_TAG ####"
          exit 1;
        fi